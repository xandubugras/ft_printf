• You have to recode the libc’s printf function.
• Your function will be called ft_printf and will be prototyped similarly to printf.
• You won’t do the buffer management in the printf function.
• You have to manage the following conversions: sSpdDioOuUxXcC
• You must manage %%
• You must manage the flags #0-+ and space
• You must manage the minimum field-width
• You must manage the precision
• You must manage the flags hh, h, l, ll, j, et z.
• More detailed conversions management: eE, fF, gG, aA, n.
• More detailed flags management: *, $, L, ’.
• Non-existing flags management: %b to print in binary, %r to print a string of nonprintable characters, %k to print a date in any ordinary ISO format etc.
• Management of alter tools for colors, fd or other fun stuff like that :)

- user calls printf
- printf parses the first argument
- for every % printf calls the control function accordingly in a while loop
- the while loop iterates through all the arguments, substituting *,  calling de centralized function and printing plain characters
- centralized function calls the flags first, then the width, then precision, then the length, then the format, returns the formated printable string
- one file for each of those

Pipeline:

- 
